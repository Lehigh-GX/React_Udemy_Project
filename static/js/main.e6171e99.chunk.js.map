{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","res","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","searchEmail","fetch","then","json","this","filterEmail","filter","monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAEaA,G,MAAO,SAACC,GAAD,OACnB,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACtB,4BAAKL,EAAMI,SAASE,MACpB,2BAAIN,EAAMI,SAASG,UCHRC,G,MAAW,SAACR,GAAD,OACvB,yBAAKC,UAAU,aAAaD,EAAMI,SAASK,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,CAAMC,IAAKD,EAAIL,GAAID,SAAUM,UCDzEE,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwC9DG,E,YAvCd,aAAe,IAAD,8BACb,+CAYDH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZtC,EAAKC,MAAQ,CACZnB,SAAU,GACVgB,YAAa,GACbI,YAAa,IALD,E,iFAQO,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAAChB,GAAD,OAASA,EAAIiB,UAClBD,MAAK,SAAChB,GAAD,OAAS,EAAKS,SAAS,CAAEf,SAAUM,S,+BAKjC,IAAD,SACuCkB,KAAKL,MAA5CnB,EADA,EACAA,SAAUgB,EADV,EACUA,YAAaI,EADvB,EACuBA,YAIzBK,EAHmBzB,EAAS0B,QAAO,SAACC,GAAD,OACxCA,EAAQzB,KAAK0B,cAAcC,SAASb,EAAYY,kBAEZF,QAAO,SAACC,GAAD,OAC3CA,EAAQxB,MAAMyB,cAAcC,SAAST,EAAYQ,kBAGlD,OACC,yBAAK/B,UAAU,OACd,gDACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAcc,KAAKd,eAC5D,kBAAC,EAAD,CACCD,YAAY,eACZC,aAAc,SAACI,GAAD,OAAO,EAAKC,SAAS,CAAEK,YAAaN,EAAEG,OAAOC,WAG5D,kBAAC,EAAD,CAAUlB,SAAUyB,S,GAnCNK,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.e6171e99.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\nexport const Card = (props) => (\n\t<div className=\"card-container\">\n\t\t<img alt=\"monster\" src={`https://robohash.org/${props.monsters.id}?set=set5&size=180x180`} />\n\t\t<h2>{props.monsters.name}</h2>\n\t\t<p>{props.monsters.email}</p>\n\t</div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.style.css';\nexport const CardList = (props) => (\n\t<div className=\"card-list\">{props.monsters.map((res) => <Card key={res.id} monsters={res} />)}</div>\n);\n","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\t<input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\n);\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t\tsearchEmail: ''\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => this.setState({ monsters: res }));\n\t}\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\trender() {\n\t\tconst { monsters, searchField, searchEmail } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\tconst filterEmail = filteredMonsters.filter((monster) =>\n\t\t\tmonster.email.toLowerCase().includes(searchEmail.toLowerCase())\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBox placeholder=\"search monsters\" handleChange={this.handleChange} />\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder=\"search email\"\n\t\t\t\t\thandleChange={(e) => this.setState({ searchEmail: e.target.value })}\n\t\t\t\t/>\n\n\t\t\t\t<CardList monsters={filterEmail} />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}